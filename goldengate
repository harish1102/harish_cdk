CREATE OR REPLACE PROCEDURE check_flag_value(
    p_id IN target_table.id%TYPE,
    p_apply OUT NUMBER
) AS
    l_flag target_table.flag%TYPE;
BEGIN
    SELECT flag INTO l_flag FROM target_table WHERE id = p_id;
    
    IF l_flag = 'N' THEN
        p_apply := 0; -- Do not apply the update
    ELSE
        p_apply := 1; -- Apply the update
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_apply := 1; -- Apply the update if the row does not exist
    WHEN OTHERS THEN
        p_apply := 0; -- Default to not applying for any other errors
END;
/
-----
MAP source_schema.source_table, TARGET target_schema.target_table,
SQLEXEC (ID check_flag, QUERY "BEGIN check_flag_value(:ID, :APPLY); END;", PARAMS (ID = id, APPLY = apply_flag)),
FILTER (@GETVAL(check_flag.apply_flag) = 1),
COLMAP (USEDEFAULTS, ...);
-----
MAP source_schema.source_table, TARGET target_schema.target_table,
FILTER (@COLVAL(source_schema.source_table.status_column, 'VARCHAR2') != 'Inactive'),
COLMAP (USEDEFAULTS, ...);
----
CREATE OR REPLACE PROCEDURE update_if_flag_yes(
    p_id IN target_table.id%TYPE,
    p_name IN target_table.name%TYPE)
IS
    v_flag target_table.flag%TYPE;
BEGIN
    SELECT flag INTO v_flag FROM target_table WHERE id = p_id;
    IF v_flag = 'YES' THEN
        UPDATE target_table SET name = p_name WHERE id = p_id;
    END IF;
END;
/
----
MAP source_schema.source_table, TARGET target_schema.target_table,
SQLEXEC (ID update_proc, 
         QUERY "EXEC update_if_flag_yes(:id, :name);",
         PARAMS(id = COLS(id), name = COLS(name)));
------
-- Example stored procedure in the target database
CREATE OR REPLACE PROCEDURE check_and_update_target(
    p_id IN NUMBER,
    p_data IN VARCHAR2) AS
BEGIN
    -- Example logic: check a condition in the target database
    IF (SELECT extra_column FROM target_table WHERE id = p_id) = 'specific_value' THEN
        -- Apply update
        UPDATE target_table SET data_column = p_data WHERE id = p_id;
    END IF;
END;
/
---
MAP source_schema.source_table, TARGET target_schema.target_table,
SQLEXEC (ID check_update, QUERY "EXEC check_and_update_target(:id, :data);",
PARAMS (id = @GETVAL('ID'), data = @GETVAL('DATA_COLUMN')));
-----

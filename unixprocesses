#!/bin/bash

# Directory to store logs
log_dir="./pid_logs"
mkdir -p "$log_dir"

# File to keep track of seen PIDs
seen_pids_file="$log_dir/seen_pids.txt"
> "$seen_pids_file" # Clear the file at the start

# Function to log new processes
log_new_processes() {
    for pid in /proc/[0-9]*
    do
        pid=${pid#/proc/} # Extract just the PID number
        if ! grep -q "^$pid$" "$seen_pids_file"; then
            echo "$pid" >> "$seen_pids_file"
            start_time=$(date +%s -r /proc/"$pid")
            echo "$pid started at $start_time" >> "$log_dir/pid_$pid.log"
        fi
    done
}

# Monitor and log process termination
monitor_and_log_termination() {
    while read -r pid; do
        if [ ! -d "/proc/$pid" ]; then
            # Process has terminated, log the time
            end_time=$(date +%s)
            start_time=$(date +%s -r "$log_dir/pid_$pid.log")
            duration=$((end_time - start_time))
            echo "$pid terminated at $end_time (Duration: $duration seconds)" >> "$log_dir/pid_$pid.log"
            sed -i "/^$pid$/d" "$seen_pids_file" # Remove PID from seen list
        fi
    done < "$seen_pids_file"
}

# Main loop
while true; do
    log_new_processes
    monitor_and_log_termination
    sleep 1 # Polling interval
done
-----
#!/bin/bash

# Get PIDs of all running processes using ps
pids=$(ps -eo pid)

# Loop through each PID and extract information from /proc/[PID]
for pid in $pids; do
    # Skip the header
    if [[ $pid == "PID" ]]; then
        continue
    fi

    proc_dir="/proc/$pid"

    # Check if /proc/[PID] exists (the process may have terminated)
    if [[ -d "$proc_dir" ]]; then
        echo "Process ID: $pid"
        
        # Extract and print some basic information about the process
        echo "Cmdline: $(<"$proc_dir/cmdline")"
        echo "Status: "
        cat "$proc_dir/status" | grep "State:"  # Print process state
        echo "------"
    else
        echo "Process $pid has terminated."
    fi
done
----
#!/bin/bash

# Oracle user, password, and SID
# Securely store and access your credentials. This is just a placeholder.
ORACLE_USER="your_oracle_user"
ORACLE_PASS="your_oracle_password"
ORACLE_SID="your_oracle_sid"
ORACLE_HOME="/path/to/oracle_home"
PATH=$ORACLE_HOME/bin:$PATH

# Temp file to store query results
temp_file="oracle_sessions_$$.tmp"

# SQL query to fetch Oracle session serial# and corresponding OS PID
sql_query="SET PAGESIZE 0 FEEDBACK OFF VERIFY OFF HEADING OFF ECHO OFF;
SELECT s.serial#, p.spid
FROM v\$session s, v\$process p
WHERE s.paddr = p.addr;"

# Execute SQL query and save results to temp file
echo "$sql_query" | sqlplus -s "$ORACLE_USER/$ORACLE_PASS@$ORACLE_SID" > "$temp_file"

# Read each line from temp file
while read -r line; do
    serial=$(echo "$line" | awk '{print $1}')
    spid=$(echo "$line" | awk '{print $2}')

    # Check if /proc/$spid exists (i.e., if the process is still running)
    if [ -d "/proc/$spid" ]; then
        state=$(grep "State:" /proc/"$spid"/status | awk '{print $2}')
        echo "Oracle Session Serial#: $serial, OS PID: $spid, State: $state"
    else
        echo "Oracle Session Serial#: $serial, OS PID: $spid, State: Not running"
    fi
done < "$temp_file"

# Cleanup
rm -f "$temp_file"
------

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: CreateBackupBranch
  steps:
  - checkout: none
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        # Define variables
        $organization = "https://dev.azure.com/YOUR_ORGANIZATION"
        $project = "YOUR_PROJECT"
        $repositoryId = "YOUR_REPOSITORY_ID"
        $sourceBranch = "refs/heads/YOUR_SOURCE_BRANCH"
        $backupBranchName = "refs/heads/backup/YOUR_BACKUP_BRANCH_NAME"
        $patToken = "YOUR_PERSONAL_ACCESS_TOKEN"

        # Encode PAT Token for authentication
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($patToken)"))

        # Get the last commit ID of the source branch
        $uri = "$organization/$project/_apis/git/repositories/$repositoryId/refs?filter=$sourceBranch&api-version=6.0"
        $headers = @{Authorization=("Basic {0}" -f $base64AuthInfo)}
        $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers
        $commitId = $response.value[0].objectId

        # Create a new backup branch with the last commit ID
        $uri = "$organization/$project/_apis/git/repositories/$repositoryId/refs?api-version=6.0"
        $body = @"
        [
          {
            "name": "$backupBranchName",
            "oldObjectId": "0000000000000000000000000000000000000000",
            "newObjectId": "$commitId"
          }
        ]
        "@
        Invoke-RestMethod -Uri $uri -Method Post -ContentType "application/json" -Headers $headers -Body $body
        echo "Backup branch created successfully."

------

jobs:
- job: CreateBranchBeforeMerge
  steps:
  - checkout: none
  - script: |
      #!/bin/bash
      
      # Variables
      ORG_URL="https://dev.azure.com/{organization}"
      PROJECT="{project}"
      REPOSITORY_ID="{repositoryId}"
      SOURCE_BRANCH="refs/heads/{sourceBranchName}"
      NEW_BRANCH_NAME="refs/heads/{newBranchName}"
      PAT="{personalAccessToken}"
      
      # Encode PAT for Authorization header
      ENCODED_PAT=$(echo -n ":$PAT" | base64)
      
      # Fetch the latest commit ID from the source branch
      LATEST_COMMIT=$(curl -s -H "Authorization: Basic $ENCODED_PAT" "$ORG_URL/$PROJECT/_apis/git/repositories/$REPOSITORY_ID/refs?filter=$SOURCE_BRANCH&api-version=6.0" | jq -r '.value[0].objectId')
      
      # Payload for creating a new branch
      JSON_PAYLOAD=$(jq -n --arg name "$NEW_BRANCH_NAME" --arg objectId "$LATEST_COMMIT" '[{name: $name, oldObjectId: "0000000000000000000000000000000000000000", newObjectId: $objectId}]')
      
      # Create a new branch using the REST API
      curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Basic $ENCODED_PAT" -d "$JSON_PAYLOAD" "$ORG_URL/$PROJECT/_apis/git/repositories/$REPOSITORY_ID/refs?api-version=6.0"
      
      echo "Branch $NEW_BRANCH_NAME created based on $SOURCE_BRANCH"
    displayName: 'Create New Branch Before PR Merge'

----
# Pseudo-code to check for a tag in a PR description or commit message
TAG_TO_CHECK="yourTag"
PR_ID=$(system.pullRequest.pullRequestId)
TAG_FOUND=$(call Azure DevOps REST API to get PR details and check for TAG_TO_CHECK)

if [ "$TAG_FOUND" = "true" ]; then
    echo "Tag found, continuing pipeline..."
else
    echo "Tag not found, stopping pipeline..."
    exit 1 # or use Azure DevOps REST API to cancel the run
fi

----
trigger:
- main

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo "Checking PR title for specific criteria..."
    PR_TITLE=$(curl -s -H "Authorization: Bearer $(System.AccessToken)" "https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/$(System.PullRequest.PullRequestId)?api-version=6.0" | jq -r '.title')
    echo "PR Title: $PR_TITLE"
    if [[ "$PR_TITLE" == *"specific criteria"* ]]; then
      echo "Criteria met, continuing pipeline..."
    else
      echo "Criteria not met, skipping pipeline..."
      exit 1 # or any other way to skip or end the pipeline
    fi
  displayName: 'Check PR Title'
  env:
    System.AccessToken: $(System.AccessToken)

# Your other pipeline steps would go here
----

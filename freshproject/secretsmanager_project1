import json
import boto3
import psycopg2

def get_secret():
    secret_name = "MyRedshiftCredentials"
    region_name = "us-west-2"

    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    get_secret_value_response = client.get_secret_value(
        SecretId=secret_name
    )

    if 'SecretString' in get_secret_value_response:
        secret = json.loads(get_secret_value_response['SecretString'])
        return secret
    else:
        raise IOError("Secret key not found")

def connect_to_redshift():
    credentials = get_secret()

    conn = psycopg2.connect(
        dbname=credentials['dbname'],
        user=credentials['username'],
        password=credentials['password'],
        host=credentials['host'],
        port=credentials['port']
    )

    cur = conn.cursor()
    cur.execute("CREATE TABLE test_table (id INTEGER, name VARCHAR);")
    conn.commit()
    cur.close()
    conn.close()

    print("Table created successfully in Redshift.")

if __name__ == '__main__':
    connect_to_redshift()





---------
from aws_cdk import (
    Stack, aws_redshift as redshift, aws_secretsmanager as secretsmanager, aws_ec2 as ec2,
)
from constructs import Construct

class RedshiftSecretsStack(Stack):
    def __init__(self, scope: Construct, id: str, **kwargs):
        super().__init__(scope, id, **kwargs)

        # Define a VPC
        vpc = ec2.Vpc(self, "MyVPC")

        # Create a Redshift cluster
        cluster = redshift.Cluster(self, "MyRedshiftCluster",
            master_user=redshift.Login(
                master_username='adminuser'
            ),
            vpc=vpc,
            default_database_name="mydatabase"
        )

        # Store Redshift credentials in AWS Secrets Manager
        secret = secretsmanager.Secret(self, "RedshiftSecret",
            secret_name="MyRedshiftCredentials",
            description="Credentials for Redshift Cluster",
            generate_secret_string=secretsmanager.SecretStringGenerator(
                secret_string_template=json.dumps({
                    "username": cluster.master_username,
                    "host": cluster.cluster_endpoint.hostname,
                    "dbname": "mydatabase",
                    "port": str(cluster.cluster_endpoint.port)
                }),
                generate_string_key="password"
            )
        )

        # Output the secret ARN
        print("Secret ARN:", secret.secret_arn)

app = App()
RedshiftSecretsStack(app, "RedshiftSecretsStack")
app.synth()
--------------

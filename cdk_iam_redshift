{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "redshift-serverless:CreateNamespace",
                "redshift-serverless:DeleteNamespace",
                "redshift-serverless:CreateWorkgroup",
                "redshift-serverless:DeleteWorkgroup",
                "redshift-serverless:GetNamespace",
                "redshift-serverless:GetWorkgroup",
                "redshift-serverless:ListNamespaces",
                "redshift-serverless:ListWorkgroups",
                "redshift-serverless:RestoreFromSnapshot",
                "redshift-serverless:CreateSnapshot",
                "redshift-serverless:DeleteSnapshot",
                "redshift-serverless:ListSnapshots"
            ],
            "Resource": "*"
        }
    ]
}
-------------------------
from aws_cdk import aws_iam as iam
from aws_cdk import core as cdk

class RedshiftServerlessIAMStack(cdk.Stack):
    def __init__(self, scope: cdk.Construct, id: str, **kwargs):
        super().__init__(scope, id, **kwargs)

        redshift_serverless_role = iam.Role(
            self, "RedshiftServerlessRole",
            assumed_by=iam.ServicePrincipal("redshift-serverless.amazonaws.com"),
            managed_policies=[
                iam.ManagedPolicy.from_aws_managed_policy_name("AmazonRedshiftServerlessFullAccess"),
                iam.ManagedPolicy.from_aws_managed_policy_name("AmazonS3ReadOnlyAccess")
                # Add other necessary policies or custom policies as required
            ]
        )

        # Example of allowing this role to assume another role
        other_role_to_assume = iam.Role.from_role_arn(
            self, "OtherRole",
            role_arn="arn:aws:iam::123456789012:role/OtherRole"
        )

        redshift_serverless_role.assume_role_policy.add_statements(iam.PolicyStatement(
            actions=["sts:AssumeRole"],
            resources=[other_role_to_assume.role_arn]
        ))
--------------
  

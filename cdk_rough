{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1",
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws:s3:::example-bucket/*"
      ],
      "Condition": {
        "IpAddress": {"aws:SourceIp": "192.0.2.0/24"}
      }
    }
  ]
}

----
CREATE TABLE iam_policy_json_ext (
  json_document CLOB
)
ORGANIZATION EXTERNAL (
  TYPE ORACLE_LOADER
  DEFAULT DIRECTORY aws_iam_json_dir
  ACCESS PARAMETERS (
    RECORDS DELIMITED BY NEWLINE
    BADFILE 'iam_policy_json_ext.bad'
    LOGFILE 'iam_policy_json_ext.log'
    FIELDS (
      json_document CHAR(4000)
    )
  )
  LOCATION ('your_iam_policy_file.json') -- Replace with your JSON file name
)
REJECT LIMIT UNLIMITED;
-----
SELECT j.json_document.PolicyName, j.json_document.PolicyId
FROM iam_policy_json_ext,
     JSON_TABLE(json_document, '$'
                COLUMNS (
                  PolicyName VARCHAR2(256) PATH '$.PolicyName',
                  PolicyId VARCHAR2(256) PATH '$.PolicyId'
                )) j;

----
trigger:
- main

parameters:
- name: environment
  displayName: Environment
  type: string
  values:
  - dev
  - test
  - prod

stages:
- stage: ValidateParameter
  jobs:
  - job: CheckEnvironment
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        if [[ "${{ parameters.environment }}" =~ ^(dev|test|prod)$ ]]; then
          echo "Valid environment parameter supplied: ${{ parameters.environment }}"
        else
          echo "##vso[task.logissue type=error]Invalid environment parameter: ${{ parameters.environment }}"
          echo "##vso[task.complete result=Failed;]"
        fi
      displayName: 'Validate Environment Parameter'

- stage: Deploy
  dependsOn: ValidateParameter
  condition: |
    and(
      succeeded(),
      in('${{ parameters.environment }}', 'dev', 'test', 'prod')
    )
  jobs:
  - deployment: DeployToEnvironment
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploying to ${{ parameters.environment }}
            displayName: 'Deploy to Environment'
      =======
trigger: none

parameters:
- name: sourceBranch
  displayName: 'Source Branch'
  type: string
  default: 'main'
  values:
  - main
  - feature
  - release

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: Build
  steps:
  - checkout: git://YourProjectName/YourRepositoryName@${{ parameters.sourceBranch }}
    displayName: 'Checkout Repository'

  - script: echo Build your project here
    displayName: 'Build Step'
---
SELECT n.nspname AS schema_name,
       c.relname AS object_name,
       CASE c.relkind
           WHEN 'r' THEN 'table'
           WHEN 'i' THEN 'index'
           WHEN 'm' THEN 'materialized view'
           ELSE c.relkind::text
       END AS object_type,
       t.spcname AS tablespace_name
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE t.spcname = 'your_tablespace_name' -- Replace with your tablespace name
   OR (c.reltablespace = 0 AND 'your_tablespace_name' = 'pg_default')
ORDER BY schema_name, object_name;
---

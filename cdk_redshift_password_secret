redshift_serverless_with_secret.py

from aws_cdk import (
    Stack,
    aws_secretsmanager as secretsmanager,
    aws_iam as iam,
    aws_redshiftserverless as redshiftserverless,
)
from constructs import Construct
import json

class RedshiftServerlessWithSecretStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, **kwargs):
        super().__init__(scope, construct_id, **kwargs)

        # Create a Secret in AWS Secrets Manager for the Redshift Serverless admin password
        db_password_secret = secretsmanager.Secret(self, "DBPassword",
            generate_secret_string=secretsmanager.SecretStringGenerator(
                secret_string_template=json.dumps({"username": "admin"}),
                generate_string_key="password",
                password_length=16,  # Adjust as needed
                exclude_characters="/@\" '",
            )
        )

        # IAM Role for Redshift Serverless
        redshift_role = iam.Role(self, "RedshiftServerlessRole",
                                 assumed_by=iam.ServicePrincipal("redshift-serverless.amazonaws.com"),
                                 managed_policies=[iam.ManagedPolicy.from_aws_managed_policy_name("service-role/AWSRedshiftServerlessServiceRolePolicy")])

        # Create the Redshift Serverless Namespace using the password from Secrets Manager
        namespace = redshiftserverless.CfnNamespace(self, "MyNamespace",
            admin_username="admin",
            # Reference the generated password in Secrets Manager
            admin_user_password=db_password_secret.secret_value_from_json("password").to_string(),
            db_name="mydatabase",
            namespace_name="myNamespace",
            iam_roles=[redshift_role.role_arn]
        )

from aws_cdk import Stack
from aws_cdk import aws_ec2 as ec2
from aws_cdk import aws_rds as rds
from aws_cdk import aws_secretsmanager as secretsmanager
from constructs import Construct

class AuroraPostgresDbStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Create or select a VPC
        vpc = ec2.Vpc(self, "MyVPC",
                      max_azs=2  # The number of AZs to use in the VPC
                     )
        
        # Create a secret in AWS Secrets Manager for the database credentials
        db_credentials_secret = secretsmanager.Secret(self, "DBCredentialsSecret",
            secret_name="aurora-postgres-credentials",
            generate_secret_string=secretsmanager.SecretStringGenerator(
                secret_string_template='{"username": "admin"}',
                generate_string_key="password",
                exclude_characters='"@/\\'
            )
        )

        # Create the Aurora PostgreSQL database cluster
        db_cluster = rds.DatabaseCluster(self, "MyAuroraPostgresCluster",
                                         engine=rds.DatabaseClusterEngine.aurora_postgres(version=rds.AuroraPostgresEngineVersion.VER_12_4),
                                         instance_props={
                                             "instance_type": ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),
                                             "vpc_subnets": {"subnet_type": ec2.SubnetType.PRIVATE},
                                             "vpc": vpc
                                         },
                                         credentials=rds.Credentials.from_secret(db_credentials_secret),  # Use the credentials secret for the database
                                         default_database_name="MyDatabase"
                                        )
-----
